// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Post {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String
  title String
  description String?
  imageUrl String?
  isFeatured Boolean @default(false)
  isPublished Boolean @default(false)
  categoryId String? @db.ObjectId
  category Category? @relation(fields: [categoryId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  tags String?
  sections Section[]
  galleryImages GalleryImage[]
  attachments Attachment[]
  comments Comment[]
  subscriptions Subscription[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([categoryId])
  @@fulltext([title])
}

model Category {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String @unique
  posts Post[]
}

model GalleryImage {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  url String
  postId String @db.ObjectId
  post Post @relation(fields: [postId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index(postId)
}

model Attachment {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  url String
  postId String @db.ObjectId
  post Post @relation(fields: [postId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index(postId)
}

model Comment {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  email String?
  name String?
  userId String
  postId String @db.ObjectId
  post Post @relation(fields: [postId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  text String
}

model Section {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  title String
  description String?
  videoUrl String?
  imageUrl String?
  position Int
  tags String?
  isPublished Boolean @default(false)
  isSubscriptionLocked Boolean @default(false)
  muxData MuxData?
  postId String @db.ObjectId
  post Post @relation(fields: [postId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  userProgress UserProgress[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MuxData {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  assetId String
  playbackId String
  sectionId String @unique @db.ObjectId
  section Section @relation(fields: [sectionId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model Subscription {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String
  postId String @db.ObjectId
  post Post @relation(fields: [postId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, postId])
  @@index([postId])
}

model UserProgress {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String
  sectionId String @db.ObjectId
  section Section @relation(fields: [sectionId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  isCompleted Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@unique([userId, sectionId])
  @@index([sectionId])
}

model Member {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @unique
  name String?
  email String?
  displayname String?
  phone String?
  description String?
  imageUrl String?
  Privileges String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

